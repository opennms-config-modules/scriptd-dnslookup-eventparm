
import java.net.InetAddress;
import org.opennms.core.spring.BeanUtils;
import org.opennms.netmgt.events.api.model.IEvent;
import org.opennms.netmgt.events.api.model.IParm;
import org.opennms.netmgt.events.api.EventForwarder;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;

eventForwarder = BeanUtils.getBean("daemonContext", "eventForwarder", EventForwarder.class);

void mangleEvent(IEvent event, String appendUei, int[] positions) {
 
    log.debug("Mangling an event: {}", event.uei);
    
    iparms  = event.getParmCollection();
    if (iparms == null) {
        log.debug("Parameters null");
    }
    else {
        log.debug("Parameters NOT null");
        newEvent = new EventBuilder(event.uei.concat(appendUei), "Scriptd", new Date())
        .setNodeid(event.nodeid)
        .setInterface(event.interfaceAddress)
        .setService(event.service)
        .getEvent();
        for(p : iparms) {
            parm = new Parm();
            newEvent.addParm(parm.copyFrom(p)); //eventForwarder won't forward an event built with immutableParms
        }
        for( i : positions ) {
            lookMeUp = lookupParm(iparms.get(i-1));
            log.debug("parm #{}", i);
            log.debug("is appended as Name: {}", lookMeUp.getParmName());
            log.debug(" with Value: {}", lookMeUp.getValue().getContent());
            newEvent.addParm(lookMeUp);
        }
        
    }
    log.debug("New event {}", newEvent.toString());
    eventForwarder.sendNow(newEvent);
}

Parm lookupParm(IParm parm) {

    value = parm.getValue().getContent();
    try {
       InetAddress ip = InetAddress.getByName(value);
       hostname = ip.getCanonicalHostName();
    } catch ( UnknownHostException e ) {
       log.debug("Reverse DNS lookup failed for {}", value);
       hostname = value; //if the lookup fails, keep the original parm value
    }
    newParm = new Parm(parm.getParmName()+"-hostname", hostname);

    return newParm;
}
